setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read mapping results
read_amp_classifications <- function(input) {
map <- read.delim(input,
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
mutate(Reference = (!!gsub(".*vs_(.+).sintax", "\\1", paste(input)))) %>%
arrange(readr::parse_number(ASV))
}
a <- read_amp_classifications("data/V13zotus_vs_AutoTax_ESVs.sintax")
b <- read_amp_classifications("data/V13zotus_vs_AutoTax_ESVs_with_Nr99.sintax")
c <- read_amp_classifications("data/V13zotus_vs_AutoTax_ESVs_with_Nr99_CF.sintax")
d <- read_amp_classifications("data/V13zotus_vs_gg_16s_13.5.sintax")
e <- read_amp_classifications("data/V13zotus_vs_rdp_16s_v16.sintax")
f <- read_amp_classifications("data/V13zotus_vs_SILVA_132_SSURef_Nr99.sintax")
g <- read_amp_classifications("data/V13zotus_vs_MiDAS_2.1.sintax")
h <- read_amp_classifications("data/V13zotus_vs_Autotax_SILVA_132_SSURef_Nr99.sintax")
i <- read_amp_classifications("data/V13zotus_vs_GTDB_r89.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,h,i)
# Read ASV table
ASVtable <- read.delim("data/V13ASVtab.txt",
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ASV=1) %>%
arrange(readr::parse_number(ASV))
# Merge ASV table and mappings
df <- left_join(ASVtable, Merged_classifications, by="ASV")
# Ranked abundance
ranked <- df %>%
gather(2:49, key="SeqID", value="counts") %>%
group_by(SeqID,Reference) %>%
arrange(desc(counts)) %>%
mutate(rank = row_number(), relative_abundance = counts/sum(counts)*100) %>%
ungroup() %>%
gather(2:8, key="Taxonomic_rank", value="Taxonomy") %>%
mutate(Reference = factor(Reference, levels = c("AutoTax_ESVs","AutoTax_ESVs_with_Nr99","AutoTax_ESVs_with_Nr99_CF", "gg_16s_13.5", "GTDB_r89", "MiDAS_2.1","rdp_16s_v16", "SILVA_132_SSURef_Nr99","Autotax_SILVA_132_SSURef_Nr99")))
Sample_metadata <- read.delim("data/Sample_metadata.txt",
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE)
ranked_w_metadata <- left_join(ranked, Sample_metadata, by="SeqID") %>%
mutate(Environment = factor(Environment, levels = c("WWTP","Anaerobic digester")))
Summary_Genus <- ranked_w_metadata %>%
filter(relative_abundance > 0.01, Taxonomic_rank==c("Genus")) %>%
group_by(SeqID, Location, Environment, Reference, Taxonomic_rank) %>%
summarize("Classified"=sum(Taxonomy!="")/n()*100)
Summary_Species <- ranked_w_metadata %>%
filter(relative_abundance > 0.01, Taxonomic_rank==c("Species")) %>%
group_by(SeqID, Location, Environment, Reference, Taxonomic_rank) %>%
summarize("Classified"=sum(Taxonomy!="")/n()*100)
Summary <- bind_rows(Summary_Genus,Summary_Species)
Figure3a <- ggplot(data=Summary, aes(x=Reference, y=Classified, fill=Reference)) +
theme_bw() +
geom_violin(scale = "width") +
ylab("Percent of ASVs with relative abundance\n higher than 0.01% classified") +
scale_fill_brewer(palette="RdYlBu")+
theme(axis.title.x=element_blank()) +
facet_grid(Taxonomic_rank~Environment) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10)) +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1))
ggsave(filename="output/Figure3a.pdf", plot=Figure3a, width=5, height=5, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3a.pdf", plot=Figure3a, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3a.pdf", plot=Figure3a, width=7, height=7, useDingbats=FALSE, limitsize=FALSE)
library(tidyverse)
setwd("C:/Users/Morten Dueholm/Dropbox/Projects/Ongoing projects/P001_AutoTax/Manuscript/Submission for mBio/Revision2/R-scripts_for_Github/Figure_3b")
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="-", into = c("Primerset", "Fragment"))
}
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="-", into = c("Primerset", "Fragment"))
}
a <- read_amp_classification("data/V13-Complete_vs_AutoTax.sintax")
b <- read_amp_classification("data/V13-200bp_Forward_vs_AutoTax.sintax")
c <- read_amp_classification("data/V13-200bp_Reverse_vs_AutoTax.sintax")
d <- read_amp_classification("data/V4-Complete_vs_AutoTax.sintax")
e <- read_amp_classification("data/V4-200bp_Forward_vs_AutoTax.sintax")
f <- read_amp_classification("data/V4-200bp_Reverse_vs_AutoTax.sintax")
g <- read_amp_classification("data/V18-Complete_vs_AutoTax.sintax")
h <- read_amp_classification("data/V19-Complete_vs_AutoTax.sintax")
i <- read_amp_classification("data/V34-Complete_vs_AutoTax.sintax")
j <- read_amp_classification("data/V34-200bp_Forward_vs_AutoTax.sintax")
k <- read_amp_classification("data/V34-200bp_Reverse_vs_AutoTax.sintax")
l <- read_amp_classification("data/V35-Complete_vs_AutoTax.sintax")
m <- read_amp_classification("data/V35-200bp_Forward_vs_AutoTax.sintax")
n <- read_amp_classification("data/V35-200bp_Reverse_vs_AutoTax.sintax")
o <- read_amp_classification("data/V45-Complete_vs_AutoTax.sintax")
p <- read_amp_classification("data/V45-200bp_Forward_vs_AutoTax.sintax")
q <- read_amp_classification("data/V45-200bp_Reverse_vs_AutoTax.sintax")
r <- read_amp_classification("data/V57-Complete_vs_AutoTax.sintax")
s <- read_amp_classification("data/V57-200bp_Forward_vs_AutoTax.sintax")
t <- read_amp_classification("data/V57-200bp_Reverse_vs_AutoTax.sintax")
u <- read_amp_classification("data/V58-Complete_vs_AutoTax.sintax")
v <- read_amp_classification("data/V58-200bp_Forward_vs_AutoTax.sintax")
w <- read_amp_classification("data/V58-200bp_Reverse_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
filter(Amplicon!="0") %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("Complete","200bp_Forward","200bp_Reverse")))
View(Merged_classifications)
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("data/(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="-", into = c("Primerset", "Fragment"))
}
a <- read_amp_classification("data/V13-Complete_vs_AutoTax.sintax")
b <- read_amp_classification("data/V13-200bp_Forward_vs_AutoTax.sintax")
c <- read_amp_classification("data/V13-200bp_Reverse_vs_AutoTax.sintax")
d <- read_amp_classification("data/V4-Complete_vs_AutoTax.sintax")
e <- read_amp_classification("data/V4-200bp_Forward_vs_AutoTax.sintax")
f <- read_amp_classification("data/V4-200bp_Reverse_vs_AutoTax.sintax")
g <- read_amp_classification("data/V18-Complete_vs_AutoTax.sintax")
h <- read_amp_classification("data/V19-Complete_vs_AutoTax.sintax")
i <- read_amp_classification("data/V34-Complete_vs_AutoTax.sintax")
j <- read_amp_classification("data/V34-200bp_Forward_vs_AutoTax.sintax")
k <- read_amp_classification("data/V34-200bp_Reverse_vs_AutoTax.sintax")
l <- read_amp_classification("data/V35-Complete_vs_AutoTax.sintax")
m <- read_amp_classification("data/V35-200bp_Forward_vs_AutoTax.sintax")
n <- read_amp_classification("data/V35-200bp_Reverse_vs_AutoTax.sintax")
o <- read_amp_classification("data/V45-Complete_vs_AutoTax.sintax")
p <- read_amp_classification("data/V45-200bp_Forward_vs_AutoTax.sintax")
q <- read_amp_classification("data/V45-200bp_Reverse_vs_AutoTax.sintax")
r <- read_amp_classification("data/V57-Complete_vs_AutoTax.sintax")
s <- read_amp_classification("data/V57-200bp_Forward_vs_AutoTax.sintax")
t <- read_amp_classification("data/V57-200bp_Reverse_vs_AutoTax.sintax")
u <- read_amp_classification("data/V58-Complete_vs_AutoTax.sintax")
v <- read_amp_classification("data/V58-200bp_Forward_vs_AutoTax.sintax")
w <- read_amp_classification("data/V58-200bp_Reverse_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
filter(Amplicon!="0") %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("Complete","200bp_Forward","200bp_Reverse")))
View(Merged_classifications)
View(Tax_ref)
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
#filter(Amplicon!="0") %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("Complete","200bp_Forward","200bp_Reverse")))
View(df)
View(df)
View(df)
Summary_genera <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Genus==ASV_Genus)/n()*100,
"Not_classified"=sum(ASV_Genus=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Genus") %>%
gather(2:4, key="Classification", value="Percentage")
View(Summary_genera)
Summary_genera <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Genus==ASV_Genus)/n()*100,
"Not_classified"=sum(ASV_Genus=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Genus")
View(Summary_genera)
Summary_genera <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Genus==ASV_Genus)/n()*100,
"Not_classified"=sum(ASV_Genus=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Genus") %>%
gather(3:5, key="Classification", value="Percentage")
Summary_species <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Species==ASV_Species)/n()*100,
"Not_classified"=sum(ASV_Species=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Species") %>%
gather(3:5, key="Classification", value="Percentage")
View(Summary_species)
Summary <- rbind(Summary_genera, Summary_species)
View(Summary)
p1 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Classification)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ESVs") +
facet_grid(Taxonomic_rank~.) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p1
p1 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Classification)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ESVs") +
facet_grid(Fragment~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p1
ggsave(filename="Figure3b_SI.pdf", plot=p1, width=8, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b_SI.pdf", plot=p1, width=8, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b_SI.pdf", plot=p1, width=10, height=8, useDingbats=FALSE, limitsize=FALSE)
Summary2 <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p2 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ESVs correctly classified") +
facet_grid(Taxonomic_rank~.) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ESVs correctly classified") +
facet_grid(Taxonomic_rank~.) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
ggsave(filename="Figure3b_new.pdf", plot=p2, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b_new.pdf", plot=p2, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b.pdf", plot=p2, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of in silico ASVs correctly classified") +
facet_grid(Taxonomic_rank~.) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
ggsave(filename="output/Figure3b.pdf", plot=p2, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b.pdf", plot=p2, width=9, height=5, useDingbats=FALSE, limitsize=FALSE)
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
ggsave(filename="output/Figure3b.pdf", plot=p2, width=9, height=5, useDingbats=FALSE, limitsize=FALSE)
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of <i>in silico</i> ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
p1 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Classification)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in Silico ASVs") +
facet_grid(Fragment~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
ggsave(filename="output/Figure3b_SI.pdf", plot=p1, width=10, height=8, useDingbats=FALSE, limitsize=FALSE)
Summary2 <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
ggsave(filename="output/Figure3b.pdf", plot=p2, width=10, height=5, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b.pdf", plot=p2, width=10, height=5, useDingbats=FALSE, limitsize=FALSE)
ggsave(filename="output/Figure3b.pdf", plot=p2, width=10, height=4, useDingbats=FALSE, limitsize=FALSE)
library(tidyverse)
setwd("C:/Users/Morten Dueholm/Dropbox/Projects/Ongoing projects/P001_AutoTax/Manuscript/Submission for mBio/Revision2/R-scripts_for_Github/Figure_1e_S3b")
# Read mapping results
read_amp_mappings <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,3) %>%
rename(ASV = V1, !!gsub(".*vs_(.+).b6", "\\1", paste(input)):=V3) %>%
arrange(readr::parse_number(ASV))
}
a <- read_amp_mappings("data/ASVs_vs_ESVs.b6")
b <- read_amp_mappings("data/ASVs_vs_ESVs_with_Nr99.b6")
c <- read_amp_mappings("data/ASVs_vs_ESVs_with_Nr99_chimera_filtered.b6")
d <- read_amp_mappings("data/ASVs_vs_MiDAS_2.1.b6")
e <- read_amp_mappings("data/ASVs_vs_gg_16s_13.5.b6")
f <- read_amp_mappings("data/ASVs_vs_RDP_all_11.5.b6")
g <- read_amp_mappings("data/ASVs_vs_SILVA_132_SSURef_Nr99.b6")
h <- read_amp_mappings("data/ASVs_vs_SILVA_132_SSURef.b6")
i <- read_amp_mappings("data/ASVs_vs_GTDB_r89.b6")
ASV_vs_all <- list(a,b,c,d,e,f,g,h,i) %>%
reduce(left_join, by = "ASV")
# Read ASV table
ASVtable <- read.delim("data/V35ASVtab.txt",
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ASV=1) %>%
arrange(readr::parse_number(ASV))
# Merge ASV table and mappings
df <- left_join(ASVtable, ASV_vs_all, by="ASV")
# Ranked abundance
ranked <- df %>%
gather(2:40, key="SeqID", value="counts") %>%
group_by(SeqID) %>%
arrange(desc(counts)) %>%
mutate(rank = row_number(), relative_abundance = counts/sum(counts)*100) %>%
ungroup() %>%
gather(2:8, key="database", value="Identity") %>%
mutate(database = factor(database, levels = c("ESVs","ESVs_with_Nr99","ESVs_with_Nr99_chimera_filtered", "gg_16s_13.5", "GTDB_r89","MiDAS_2.1","RDP_all_11.5", "SILVA_132_SSURef_Nr99", "SILVA_132_SSURef")))
Sample_metadata <- read.delim("data/SraRunTable.txt",
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE)
ranked_w_metadata <- left_join(ranked, Sample_metadata, by="SeqID")
d1 <- ranked_w_metadata %>%
filter(relative_abundance > 0.01, WWTP!="RAS", database=="ESVs") %>%
group_by(WWTP, database) %>%
summarize("100%"=sum(Identity==100.0)/n()*100,
">98.7%"=(sum(Identity>=98.7)-sum(Identity==100.0))/n()*100,
">94.5%"=(sum(Identity>=94.5)-sum(Identity>=98.7))/n()*100,
"detected_amplicons"=n()) %>%
gather(3:5, key="temp_Identity", value = "fraction") %>%
mutate(Identity=factor(temp_Identity, levels=c(">94.5%",">98.7%","100%")))
d2 <- ranked_w_metadata %>%
filter(relative_abundance > 0.01, WWTP!="RAS") %>%
group_by(WWTP, database) %>%
summarize("100%"=sum(Identity==100.0)/n()*100,
">98.7%"=(sum(Identity>=98.7)-sum(Identity==100.0))/n()*100,
">94.5%"=(sum(Identity>=94.5)-sum(Identity>=98.7))/n()*100,
"detected_amplicons"=n()) %>%
gather(3:5, key="temp_Identity", value = "fraction") %>%
mutate(Identity=factor(temp_Identity, levels=c(">94.5%",">98.7%","100%")))
Figure1e <- ggplot(data=d1, aes(x=WWTP, y=fraction, fill=Identity)) +
theme_bw() +
geom_bar(color="black",stat="identity", width=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust=1, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ASVs with\n relative abundance >0.01%") +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10), expand=c(0,2))
FigureS3b <- ggplot(data=d2, aes(x=database, y=fraction, fill=Identity)) +
theme_bw() +
geom_bar(color="black",stat="identity", width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ASVs with relative abundance higher than 0.01%") +
theme(axis.title.x=element_blank()) +
facet_wrap(~WWTP, ncol = 6) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10), expand=c(0,2))
FigureS3b
ranked <- df %>%
gather(2:40, key="SeqID", value="counts") %>%
group_by(SeqID) %>%
arrange(desc(counts)) %>%
mutate(rank = row_number(), relative_abundance = counts/sum(counts)*100) %>%
ungroup()
View(ranked)
# Ranked abundance
ranked <- df %>%
gather(2:40, key="SeqID", value="counts") %>%
group_by(SeqID) %>%
arrange(desc(counts)) %>%
mutate(rank = row_number(), relative_abundance = counts/sum(counts)*100) %>%
ungroup() %>%
gather(2:10, key="database", value="Identity") %>%
mutate(database = factor(database, levels = c("ESVs","ESVs_with_Nr99","ESVs_with_Nr99_chimera_filtered", "gg_16s_13.5", "GTDB_r89","MiDAS_2.1","RDP_all_11.5", "SILVA_132_SSURef_Nr99", "SILVA_132_SSURef")))
Sample_metadata <- read.delim("data/SraRunTable.txt",
sep = "\t",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE)
ranked_w_metadata <- left_join(ranked, Sample_metadata, by="SeqID")
d2 <- ranked_w_metadata %>%
filter(relative_abundance > 0.01, WWTP!="RAS") %>%
group_by(WWTP, database) %>%
summarize("100%"=sum(Identity==100.0)/n()*100,
">98.7%"=(sum(Identity>=98.7)-sum(Identity==100.0))/n()*100,
">94.5%"=(sum(Identity>=94.5)-sum(Identity>=98.7))/n()*100,
"detected_amplicons"=n()) %>%
gather(3:5, key="temp_Identity", value = "fraction") %>%
mutate(Identity=factor(temp_Identity, levels=c(">94.5%",">98.7%","100%")))
FigureS3b <- ggplot(data=d2, aes(x=database, y=fraction, fill=Identity)) +
theme_bw() +
geom_bar(color="black",stat="identity", width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent of ASVs with relative abundance higher than 0.01%") +
theme(axis.title.x=element_blank()) +
facet_wrap(~WWTP, ncol = 6) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10), expand=c(0,2))
ggsave(filename="output/FigureS3b.pdf", plot=FigureS3b, width=12, height=5, useDingbats=FALSE, limitsize=FALSE)
