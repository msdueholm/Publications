k <- read_amp_classification("data2/V34-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
l <- read_amp_classification("data2/V35-FL-ESVs_vs_AutoTax.sintax")
m <- read_amp_classification("data2/V35-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
n <- read_amp_classification("data2/V35-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
o <- read_amp_classification("data2/V45-FL-ESVs_vs_AutoTax.sintax")
p <- read_amp_classification("data2/V45-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
q <- read_amp_classification("data2/V45-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
r <- read_amp_classification("data2/V57-FL-ESVs_vs_AutoTax.sintax")
s <- read_amp_classification("data2/V57-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
t <- read_amp_classification("data2/V57-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
u <- read_amp_classification("data2/V58-FL-ESVs_vs_AutoTax.sintax")
v <- read_amp_classification("data2/V58-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
w <- read_amp_classification("data2/V58-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,g2,g3,h,h2,h3,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("FL-ESVs","FL-ESVs+FL-OTUs-CF%","FL-ESVs+FL-OTUs-CF+")))
Summary2 <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
View(Summary2)
View(Merged_classifications)
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("data2/(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="-", into = c("Primerset", "Fragment"))
}
a <- read_amp_classification("data2/V13-FL-ESVs_vs_AutoTax.sintax")
b <- read_amp_classification("data2/V13-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
c <- read_amp_classification("data2/V13-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
d <- read_amp_classification("data2/V4-FL-ESVs_vs_AutoTax.sintax")
e <- read_amp_classification("data2/V4-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
f <- read_amp_classification("data2/V4-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
g <- read_amp_classification("data2/V18-FL-ESVs_vs_AutoTax.sintax")
g2 <- read_amp_classification("data2/V18-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
g3 <- read_amp_classification("data2/V18-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
h <- read_amp_classification("data2/V19-FL-ESVs_vs_AutoTax.sintax")
h2 <- read_amp_classification("data2/V19-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
h3 <- read_amp_classification("data2/V19-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
i <- read_amp_classification("data2/V34-FL-ESVs_vs_AutoTax.sintax")
j <- read_amp_classification("data2/V34-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
k <- read_amp_classification("data2/V34-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
l <- read_amp_classification("data2/V35-FL-ESVs_vs_AutoTax.sintax")
m <- read_amp_classification("data2/V35-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
n <- read_amp_classification("data2/V35-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
o <- read_amp_classification("data2/V45-FL-ESVs_vs_AutoTax.sintax")
p <- read_amp_classification("data2/V45-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
q <- read_amp_classification("data2/V45-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
r <- read_amp_classification("data2/V57-FL-ESVs_vs_AutoTax.sintax")
s <- read_amp_classification("data2/V57-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
t <- read_amp_classification("data2/V57-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
u <- read_amp_classification("data2/V58-FL-ESVs_vs_AutoTax.sintax")
v <- read_amp_classification("data2/V58-FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
w <- read_amp_classification("data2/V58-FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,g2,g3,h,h2,h3,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("FL-ESVs","FL-ESVs+FL-OTUs-CF%","FL-ESVs+FL-OTUs-CF+")))
Summary2 <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p2 <- ggplot(data=Summary2, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
View(Summary2)
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("data2/(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="_", into = c("Primerset", "Fragment"))
}
a <- read_amp_classification("data2/V13_FL-ESVs_vs_AutoTax.sintax")
b <- read_amp_classification("data2/V13_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
c <- read_amp_classification("data2/V13_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
d <- read_amp_classification("data2/V4_FL-ESVs_vs_AutoTax.sintax")
e <- read_amp_classification("data2/V4_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
f <- read_amp_classification("data2/V4_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
g <- read_amp_classification("data2/V18_FL-ESVs_vs_AutoTax.sintax")
g2 <- read_amp_classification("data2/V18_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
g3 <- read_amp_classification("data2/V18_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
h <- read_amp_classification("data2/V19_FL-ESVs_vs_AutoTax.sintax")
h2 <- read_amp_classification("data2/V19_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
h3 <- read_amp_classification("data2/V19_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
i <- read_amp_classification("data2/V34_FL-ESVs_vs_AutoTax.sintax")
j <- read_amp_classification("data2/V34_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
k <- read_amp_classification("data2/V34_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
l <- read_amp_classification("data2/V35_FL-ESVs_vs_AutoTax.sintax")
m <- read_amp_classification("data2/V35_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
n <- read_amp_classification("data2/V35_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
o <- read_amp_classification("data2/V45_FL-ESVs_vs_AutoTax.sintax")
p <- read_amp_classification("data2/V45_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
q <- read_amp_classification("data2/V45_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
r <- read_amp_classification("data2/V57_FL-ESVs_vs_AutoTax.sintax")
s <- read_amp_classification("data2/V57_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
t <- read_amp_classification("data2/V57_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
u <- read_amp_classification("data2/V58_FL-ESVs_vs_AutoTax.sintax")
v <- read_amp_classification("data2/V58_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
w <- read_amp_classification("data2/V58_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,g2,g3,h,h2,h3,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("FL-ESVs","FL-ESVs+FL-OTUs-CF%","FL-ESVs+FL-OTUs-CF+")))
Summary_genera <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Genus==ASV_Genus)/n()*100,
"Not_classified"=sum(ASV_Genus=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Genus") %>%
gather(3:5, key="Classification", value="Percentage")
Summary_species <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Species==ASV_Species)/n()*100,
"Not_classified"=sum(ASV_Species=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Species") %>%
gather(3:5, key="Classification", value="Percentage")
Summary <- rbind(Summary_genera, Summary_species)
p1 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Classification)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in Silico ASVs") +
facet_grid(Fragment~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p1
Summary <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p2 <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Fragment)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
p2
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("data2/(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="_", into = c("Primerset", "Database"))
}
a <- read_amp_classification("data2/V13_FL-ESVs_vs_AutoTax.sintax")
b <- read_amp_classification("data2/V13_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
c <- read_amp_classification("data2/V13_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
d <- read_amp_classification("data2/V4_FL-ESVs_vs_AutoTax.sintax")
e <- read_amp_classification("data2/V4_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
f <- read_amp_classification("data2/V4_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
g <- read_amp_classification("data2/V18_FL-ESVs_vs_AutoTax.sintax")
g2 <- read_amp_classification("data2/V18_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
g3 <- read_amp_classification("data2/V18_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
h <- read_amp_classification("data2/V19_FL-ESVs_vs_AutoTax.sintax")
h2 <- read_amp_classification("data2/V19_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
h3 <- read_amp_classification("data2/V19_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
i <- read_amp_classification("data2/V34_FL-ESVs_vs_AutoTax.sintax")
j <- read_amp_classification("data2/V34_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
k <- read_amp_classification("data2/V34_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
l <- read_amp_classification("data2/V35_FL-ESVs_vs_AutoTax.sintax")
m <- read_amp_classification("data2/V35_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
n <- read_amp_classification("data2/V35_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
o <- read_amp_classification("data2/V45_FL-ESVs_vs_AutoTax.sintax")
p <- read_amp_classification("data2/V45_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
q <- read_amp_classification("data2/V45_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
r <- read_amp_classification("data2/V57_FL-ESVs_vs_AutoTax.sintax")
s <- read_amp_classification("data2/V57_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
t <- read_amp_classification("data2/V57_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
u <- read_amp_classification("data2/V58_FL-ESVs_vs_AutoTax.sintax")
v <- read_amp_classification("data2/V58_FL-ESVs+FL-OTUs-CF%_vs_AutoTax.sintax")
w <- read_amp_classification("data2/V58_FL-ESVs+FL-OTUs-CF+_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,g2,g3,h,h2,h3,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Database = factor(Database, levels = c("FL-ESVs","FL-ESVs+FL-OTUs-CF+","FL-ESVs+FL-OTUs-CF%")))
Summary <- df %>%
group_by(Primerset,Database) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
p <- ggplot(data=Summary, aes(x=Primerset, y=Percentage, fill=Database)) +
theme_bw() +
geom_bar(color="black",stat="identity",position = position_dodge(preserve = 'single'), width=0.8) +
theme(axis.text.x = element_text(angle = 90, vjust=0.5, hjust = 1)) +
scale_fill_brewer(palette="RdYlBu")+
ylab("Percent in silico ASVs correctly classified") +
facet_grid(.~Taxonomic_rank) +
theme(axis.title.x=element_blank()) +
scale_y_continuous(limits = c(0, 100), breaks=seq(0,100,10))
ggsave(filename="output/Figure3x.pdf", plot=p, width=10, height=4, useDingbats=FALSE, limitsize=FALSE)
View(Summary)
ggsave(filename="output/Figure3b_SI.pdf", plot=p1, width=10, height=8, useDingbats=FALSE, limitsize=FALSE)
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read mapping results
read_amp_classification <- function(input) {
map <- read.delim(input,
sep = "\t",
header = FALSE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
select(1,4) %>%
rename(ESV = V1) %>%
arrange(readr::parse_number(ESV)) %>%
mutate(ESV = str_replace_all(ESV, "[:blank:].*", "")) %>%
mutate(V4 = str_replace_all(V4, c("d:"), "")) %>%
mutate(V4 = str_replace_all(V4, c(",p:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",c:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",o:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",f:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",g:"), ",")) %>%
mutate(V4 = str_replace_all(V4, c(",s:"), ",")) %>%
separate(V4,sep=",", into = c("ASV_Domain", "ASV_Phylum", "ASV_Order", "ASV_Class", "ASV_Familiy", "ASV_Genus", "ASV_Species" )) %>%
mutate(Amplicon=!!gsub("data/(.+)_vs_AutoTax.sintax", "\\1", paste(input))) %>%
separate(Amplicon,sep="-", into = c("Primerset", "Fragment"))
}
a <- read_amp_classification("data/V13-Complete_vs_AutoTax.sintax")
b <- read_amp_classification("data/V13-200bp_Forward_vs_AutoTax.sintax")
c <- read_amp_classification("data/V13-200bp_Reverse_vs_AutoTax.sintax")
d <- read_amp_classification("data/V4-Complete_vs_AutoTax.sintax")
e <- read_amp_classification("data/V4-200bp_Forward_vs_AutoTax.sintax")
f <- read_amp_classification("data/V4-200bp_Reverse_vs_AutoTax.sintax")
g <- read_amp_classification("data/V18-Complete_vs_AutoTax.sintax")
h <- read_amp_classification("data/V19-Complete_vs_AutoTax.sintax")
i <- read_amp_classification("data/V34-Complete_vs_AutoTax.sintax")
j <- read_amp_classification("data/V34-200bp_Forward_vs_AutoTax.sintax")
k <- read_amp_classification("data/V34-200bp_Reverse_vs_AutoTax.sintax")
l <- read_amp_classification("data/V35-Complete_vs_AutoTax.sintax")
m <- read_amp_classification("data/V35-200bp_Forward_vs_AutoTax.sintax")
n <- read_amp_classification("data/V35-200bp_Reverse_vs_AutoTax.sintax")
o <- read_amp_classification("data/V45-Complete_vs_AutoTax.sintax")
p <- read_amp_classification("data/V45-200bp_Forward_vs_AutoTax.sintax")
q <- read_amp_classification("data/V45-200bp_Reverse_vs_AutoTax.sintax")
r <- read_amp_classification("data/V57-Complete_vs_AutoTax.sintax")
s <- read_amp_classification("data/V57-200bp_Forward_vs_AutoTax.sintax")
t <- read_amp_classification("data/V57-200bp_Reverse_vs_AutoTax.sintax")
u <- read_amp_classification("data/V58-Complete_vs_AutoTax.sintax")
v <- read_amp_classification("data/V58-200bp_Forward_vs_AutoTax.sintax")
w <- read_amp_classification("data/V58-200bp_Reverse_vs_AutoTax.sintax")
Merged_classifications <- bind_rows(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w)
# Read reference taxonomy
Tax_ref <- read.delim("data/tax_complete.csv",
sep = ",",
header = TRUE,
quote = "\"",
fill = TRUE,
check.names = FALSE,
stringsAsFactors = FALSE) %>%
rename(ESV=1) %>%
arrange(readr::parse_number(ESV))
# Merge ASV table and mappings
df <- left_join(Tax_ref, Merged_classifications, by="ESV") %>% replace(.,is.na(.),0) %>%
mutate(Primerset = factor(Primerset, levels = c("V13","V34","V35","V4","V45","V57","V58","V18","V19"))) %>%
mutate(Fragment = factor(Fragment, levels = c("Complete","200bp_Forward","200bp_Reverse")))
Summary_genera <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Genus==ASV_Genus)/n()*100,
"Not_classified"=sum(ASV_Genus=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Genus") %>%
gather(3:5, key="Classification", value="Percentage")
Summary_species <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Correct_classification"=sum(Species==ASV_Species)/n()*100,
"Not_classified"=sum(ASV_Species=="0")/n()*100,
"Wrong_classification"=100-Correct_classification-Not_classified,
"Taxonomic_rank"="Species") %>%
gather(3:5, key="Classification", value="Percentage")
Summary <- rbind(Summary_genera, Summary_species)
Summary2 <- df %>%
group_by(Primerset,Fragment) %>%
summarize("Genus"=sum(Genus==ASV_Genus)/n()*100,
"Species"=sum(Species==ASV_Species)/n()*100) %>%
gather(3:4, key = "Taxonomic_rank", value = "Percentage")
View(Summary2)
library(ampvis2)
library(tidyverse)
setwd("C:/Users/Morten Dueholm/Dropbox/Projects/Ongoing projects/P040_Mathias_master_project/Amplicons/First_run")
usearch_asvtable <- amp_import_usearch(otutab = "ASVtab.txt", sintax = "ASV.sintax")
metadata <- read.delim("Samples.txt", header = T, sep = ",") %>%
mutate(SeqID = factor(SeqID, levels = c("PCR-Pos", "PCR-Neg", "Ext-Neg", "Sludge", "Acetate", "Casamino_acids", "Glucose", "Manose", "Tryptone")))
d <- amp_load(usearch_asvtable, metadata)
d_sub <- amp_subset_samples(d, SeqID %in% c("Sludge", "Acetate", "Casamino_acids", "Glucose", "Manose", "Tryptone"))
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "OTU",
tax_add = "Genus",
round=3,
min_abundance = 0.001,
tax_show = 100) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
# Export figur (Adjust width and height)
ggsave(filename="Ampvis2_top100.pdf", plot=p, width=7, height=20, useDingbats=FALSE, limitsize=FALSE)
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "OTU",
tax_add = "Genus",
round=3,
min_abundance = 0.001,
tax_show = 100) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none",
color_vector = c("#91bfdb","#ffffbf","#fc8d59"))
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "OTU",
tax_add = "Genus",
round=3,
min_abundance = 0.001,
tax_show = 100,
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
p
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "OTU",
tax_add = "Genus",
round=3,
min_abundance = 0.001,
tax_show = 10,
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
p
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "Genus",
tax_add = "Class",
round=3,
min_abundance = 0.001,
tax_show = 10,
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
p
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "Genus",
tax_add = "Class",
tax_empty = "remove",
round=3,
min_abundance = 0.001,
tax_show = 10,
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
p
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "Genus",
tax_add = "Class",
tax_empty = "remove",
round=3,
min_abundance = 0.001,
tax_show = 10,
sort_by = "Sludge",
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
p
# Export figur (Adjust width and height)
ggsave(filename="Ampvis2_top10.pdf", plot=p, width=6, height=6, useDingbats=FALSE, limitsize=FALSE)
p <- amp_heatmap(d_sub,
group_by = "SeqID",
tax_aggregate = "Genus",
tax_add = "Class",
tax_empty = "remove",
round=3,
min_abundance = 0.001,
tax_show = 15,
sort_by = "Sludge",
color_vector = c("#91bfdb","#ffffbf","#fc8d59")) +
theme(axis.text.x = element_text(angle = 45, size=10, vjust = 1),
axis.text.y = element_text(size=8),
legend.position="none")
# Export figur (Adjust width and height)
ggsave(filename="Ampvis2_top10.pdf", plot=p, width=6, height=5, useDingbats=FALSE, limitsize=FALSE)
